"""
Django settings for store_apna_apna project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY","")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

    # "semantic_admin",
    # "semantic_forms",
INSTALLED_APPS = [
    "jazzmin",
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.admin",
    "rest_framework",
    "account",
    "store",
    "order",
    "wallet",
]

AUTH_USER_MODEL = 'account.User' 
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'store_apna_apna.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'store_apna_apna.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATIC_URL = 'static/'
# The directory where static files will be collected when you run `collectstatic`

# Directories where Django will look for additional static files during development
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Your static files
]


# For serving static files when DEBUG = False, you need to set this to True:
if not DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        'rest_framework.permissions.IsAuthenticated',
    ]
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),  # Access token expires in 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=24),  # Refresh token expires in 30 minutes
    'ROTATE_REFRESH_TOKENS': False,  # To ensure that refresh tokens don't get rotated automatically
    'BLACKLIST_AFTER_ROTATION': True,  # Optional: Prevent token blacklisting after refresh
    'ALGORITHM': 'HS256',  # Algorithm for signing JWT tokens
    'SIGNING_KEY': SECRET_KEY,  # Your secret key (should be the same as Django's SECRET_KEY)
    'USER_ID_FIELD': 'id',  # ID field for user (default is 'id')
    'USER_ID_CLAIM': 'user_id',  # The claim to represent the user ID
}

# Define the path for media files
MEDIA_URL = '/media/'  # URL for accessing media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# JAZZMIN_SETTINGS_
JAZZMIN_SETTINGS = {
"site_title": "Store Apna Apna",
"site_brand": "Store Apna Apna",
"site_header": "Store Apna Apna",
"copyright": "STORE APNA APNA",
"welcome_sign": "Welcome to the Store Apna Apna",
"site_logo": 'images/UntitledText.png',
"icons": {
        "account":"fas fa-user",
        "account.city": "fas fa-map-marker-alt",
        "account.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "order.order": "fas fa-shopping-cart",
        "order.orderitem": "fas fa-clipboard-list",
        "store":"fas fa-user",
        "store.store": "fas fa-store",
        "store.product":"fas fa-cogs"
    },
}